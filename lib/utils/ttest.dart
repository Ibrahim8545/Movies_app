import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:moviesapp/models/new_release_model.dart';

class NewReleaseDataSource {
  static const String collectionName = 'new_releases'; // Firestore collection name

  static Stream<List<NewRealseModel>> getNewReleases() {
    CollectionReference collectionReference =
        FirebaseFirestore.instance.collection(collectionName);

    return collectionReference.snapshots().map((querySnapshot) {
      List<NewRealseModel> newReleasesList = [];
      for (var doc in querySnapshot.docs) {
        Map<String, dynamic> json = doc.data() as Map<String, dynamic>;
        newReleasesList.add(NewRealseModel.fromJson(json));
      }
      return newReleasesList;
    });
  }

  static Future<void> addNewRelease(NewRealseModel newRelease) async {
    CollectionReference collectionReference =
        FirebaseFirestore.instance.collection(collectionName);
    try {
      // Assuming that the document ID is generated by Firestore
      await collectionReference.add(newRelease.toJson());
      print("New release added: ${newRelease.results?.first.title}");
    } catch (e) {
      print("Failed to add new release: $e");
    }
  }

  static Future<void> updateNewRelease(String documentId, NewRealseModel newRelease) async {
    CollectionReference collectionReference =
        FirebaseFirestore.instance.collection(collectionName);

    try {
      await collectionReference.doc(documentId).update(newRelease.toJson());
      print("New release updated: ${newRelease.results?.first.title}");
    } catch (e) {
      print("Failed to update new release: $e");
    }
  }

  static Future<void> deleteNewRelease(String documentId) async {
    CollectionReference collectionReference =
        FirebaseFirestore.instance.collection(collectionName);

    try {
      await collectionReference.doc(documentId).delete();
      print("New release deleted: $documentId");
    } catch (e) {
      print("Failed to delete new release: $e");
    }
  }
}
